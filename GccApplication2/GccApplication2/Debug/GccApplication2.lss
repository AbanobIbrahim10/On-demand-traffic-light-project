
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cf4  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085b  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cc  00000000  00000000  00001deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000853  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000037a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  74:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TimerOvInterrupt>:



void TimerOvInterrupt ()
{
	x++;
  7c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <x>
  80:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <x+0x1>
  84:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <x+0x2>
  88:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <x+0x3>
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	a1 1d       	adc	r26, r1
  90:	b1 1d       	adc	r27, r1
  92:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <x>
  96:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <x+0x1>
  9a:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <x+0x2>
  9e:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <x+0x3>
	if( x==23415 || x==27315 ||x==31215 || x==35115 ||x==62493 || x==66393 ||x==70293 || x==74193 || x==78000)
  a2:	87 37       	cpi	r24, 0x77	; 119
  a4:	2b e5       	ldi	r18, 0x5B	; 91
  a6:	92 07       	cpc	r25, r18
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	91 f1       	breq	.+100    	; 0x112 <TimerOvInterrupt+0x96>
  ae:	83 3b       	cpi	r24, 0xB3	; 179
  b0:	2a e6       	ldi	r18, 0x6A	; 106
  b2:	92 07       	cpc	r25, r18
  b4:	a1 05       	cpc	r26, r1
  b6:	b1 05       	cpc	r27, r1
  b8:	61 f1       	breq	.+88     	; 0x112 <TimerOvInterrupt+0x96>
  ba:	8f 3e       	cpi	r24, 0xEF	; 239
  bc:	29 e7       	ldi	r18, 0x79	; 121
  be:	92 07       	cpc	r25, r18
  c0:	a1 05       	cpc	r26, r1
  c2:	b1 05       	cpc	r27, r1
  c4:	31 f1       	breq	.+76     	; 0x112 <TimerOvInterrupt+0x96>
  c6:	8b 32       	cpi	r24, 0x2B	; 43
  c8:	29 e8       	ldi	r18, 0x89	; 137
  ca:	92 07       	cpc	r25, r18
  cc:	a1 05       	cpc	r26, r1
  ce:	b1 05       	cpc	r27, r1
  d0:	01 f1       	breq	.+64     	; 0x112 <TimerOvInterrupt+0x96>
  d2:	8d 31       	cpi	r24, 0x1D	; 29
  d4:	24 ef       	ldi	r18, 0xF4	; 244
  d6:	92 07       	cpc	r25, r18
  d8:	a1 05       	cpc	r26, r1
  da:	b1 05       	cpc	r27, r1
  dc:	d1 f0       	breq	.+52     	; 0x112 <TimerOvInterrupt+0x96>
  de:	89 35       	cpi	r24, 0x59	; 89
  e0:	23 e0       	ldi	r18, 0x03	; 3
  e2:	92 07       	cpc	r25, r18
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	a2 07       	cpc	r26, r18
  e8:	b1 05       	cpc	r27, r1
  ea:	99 f0       	breq	.+38     	; 0x112 <TimerOvInterrupt+0x96>
  ec:	85 39       	cpi	r24, 0x95	; 149
  ee:	22 e1       	ldi	r18, 0x12	; 18
  f0:	92 07       	cpc	r25, r18
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	a2 07       	cpc	r26, r18
  f6:	b1 05       	cpc	r27, r1
  f8:	61 f0       	breq	.+24     	; 0x112 <TimerOvInterrupt+0x96>
  fa:	81 3d       	cpi	r24, 0xD1	; 209
  fc:	21 e2       	ldi	r18, 0x21	; 33
  fe:	92 07       	cpc	r25, r18
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	a2 07       	cpc	r26, r18
 104:	b1 05       	cpc	r27, r1
 106:	29 f0       	breq	.+10     	; 0x112 <TimerOvInterrupt+0x96>
 108:	80 3b       	cpi	r24, 0xB0	; 176
 10a:	90 43       	sbci	r25, 0x30	; 48
 10c:	a1 40       	sbci	r26, 0x01	; 1
 10e:	b1 05       	cpc	r27, r1
 110:	31 f4       	brne	.+12     	; 0x11e <TimerOvInterrupt+0xa2>
		TOG_BIT(blinking,0);
 112:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	89 27       	eor	r24, r25
 11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 11e:	08 95       	ret

00000120 <Ex0interrupt>:
}

void Ex0interrupt()
{
	x=five_seconds;
 120:	8b e4       	ldi	r24, 0x4B	; 75
 122:	9c e4       	ldi	r25, 0x4C	; 76
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <x>
 12c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <x+0x1>
 130:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <x+0x2>
 134:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <x+0x3>
	Ex0IntVoidDisable();
 138:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Ex0IntVoidDisable>
 13c:	08 95       	ret

0000013e <main>:
#include "app.h"

int main(void)
{
	
	EXinterruptVoidCallBack(Ex0interrupt);
 13e:	80 e9       	ldi	r24, 0x90	; 144
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <EXinterruptVoidCallBack>
	Ex0Intuint8Init(EXinterrupt_uint8_Ex0,ExInterrupt_uint8_Enable,ExInterrupt_uint8_RaisingEdge);
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 b7 02 	call	0x56e	; 0x56e <Ex0Intuint8Init>
	TimerVoidSetCallBack(TimerOvInterrupt);
 150:	8e e3       	ldi	r24, 0x3E	; 62
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 34 03 	call	0x668	; 0x668 <TimerVoidSetCallBack>
	Timer0uint8Init(Timer_uint8NormalMode,Timer_uint8Enable,0);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 14 03 	call	0x628	; 0x628 <Timer0uint8Init>
	
    while (1) 
    {
			if(x<five_seconds)
 162:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <x>
 166:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <x+0x1>
 16a:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <x+0x2>
 16e:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <x+0x3>
 172:	8b 34       	cpi	r24, 0x4B	; 75
 174:	2c e4       	ldi	r18, 0x4C	; 76
 176:	92 07       	cpc	r25, r18
 178:	a1 05       	cpc	r26, r1
 17a:	b1 05       	cpc	r27, r1
 17c:	68 f4       	brcc	.+26     	; 0x198 <main+0x5a>
			{
				LEDuint8TurnOn(DIO_uint8_PORTA,DIO_uint8_PIN0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 26 01 	call	0x24c	; 0x24c <LEDuint8TurnOn>
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN2);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
 196:	e5 cf       	rjmp	.-54     	; 0x162 <main+0x24>
			}
			else if (x<ten_seconds)
 198:	86 39       	cpi	r24, 0x96	; 150
 19a:	28 e9       	ldi	r18, 0x98	; 152
 19c:	92 07       	cpc	r25, r18
 19e:	a1 05       	cpc	r26, r1
 1a0:	b1 05       	cpc	r27, r1
 1a2:	e0 f4       	brcc	.+56     	; 0x1dc <main+0x9e>
			{
				if(x<19600)
 1a4:	80 39       	cpi	r24, 0x90	; 144
 1a6:	9c 44       	sbci	r25, 0x4C	; 76
 1a8:	a1 05       	cpc	r26, r1
 1aa:	b1 05       	cpc	r27, r1
 1ac:	10 f4       	brcc	.+4      	; 0x1b2 <main+0x74>
					Ex0IntVoidDisable();
 1ae:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <Ex0IntVoidDisable>
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN0);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				if(blinking==0)
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1be:	81 11       	cpse	r24, r1
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <main+0x8c>
					LEDuint8TurnOn(DIO_uint8_PORTA,DIO_uint8_PIN1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	0e 94 26 01 	call	0x24c	; 0x24c <LEDuint8TurnOn>
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <main+0x94>
				else
				{
					LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN1);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				}
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN2);
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
 1da:	c3 cf       	rjmp	.-122    	; 0x162 <main+0x24>
				
			}
			else if(x<fifteen_seconds)
 1dc:	81 3e       	cpi	r24, 0xE1	; 225
 1de:	24 ee       	ldi	r18, 0xE4	; 228
 1e0:	92 07       	cpc	r25, r18
 1e2:	a1 05       	cpc	r26, r1
 1e4:	b1 05       	cpc	r27, r1
 1e6:	68 f4       	brcc	.+26     	; 0x202 <main+0xc4>
			{
				
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN1);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				LEDuint8TurnOn(DIO_uint8_PORTA,DIO_uint8_PIN2);
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	0e 94 26 01 	call	0x24c	; 0x24c <LEDuint8TurnOn>
 200:	b0 cf       	rjmp	.-160    	; 0x162 <main+0x24>
				
			}
			else if (x<twenty_seconds)
 202:	8c 32       	cpi	r24, 0x2C	; 44
 204:	91 43       	sbci	r25, 0x31	; 49
 206:	a1 40       	sbci	r26, 0x01	; 1
 208:	b1 05       	cpc	r27, r1
 20a:	a8 f4       	brcc	.+42     	; 0x236 <main+0xf8>
			{
				
				
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN0);
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				if(blinking==0)
 214:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 218:	81 11       	cpse	r24, r1
 21a:	04 c0       	rjmp	.+8      	; 0x224 <main+0xe6>
				LEDuint8TurnOn(DIO_uint8_PORTA,DIO_uint8_PIN1);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	0e 94 26 01 	call	0x24c	; 0x24c <LEDuint8TurnOn>
 222:	04 c0       	rjmp	.+8      	; 0x22c <main+0xee>
				else
				{
					LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN1);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
				}
				LEDuint8TurnOff(DIO_uint8_PORTA,DIO_uint8_PIN2);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	0e 94 35 01 	call	0x26a	; 0x26a <LEDuint8TurnOff>
 234:	96 cf       	rjmp	.-212    	; 0x162 <main+0x24>
				
			}
			else
			{
				
				x=0;
 236:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <x>
 23a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <x+0x1>
 23e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <x+0x2>
 242:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <x+0x3>
				Ex0IntVoidEnable();
 246:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Ex0IntVoidEnable>
 24a:	8b cf       	rjmp	.-234    	; 0x162 <main+0x24>

0000024c <LEDuint8TurnOn>:

#include "../../MCAL/DIO/DIO_interface.h"
#include "../../APP/STD_TYPES.h"

uint8 LEDuint8TurnOn( uint8 Copy_uint8PortId, uint8 Copy_uint8PinId)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	c8 2f       	mov	r28, r24
 252:	d6 2f       	mov	r29, r22
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;

	LOCAL_uint8ErrorState=	DIO_uint8SetPinDirection(Copy_uint8PortId,Copy_uint8PinId,DIO_uint8_OUTPUT);
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	0e 94 44 01 	call	0x288	; 0x288 <DIO_uint8SetPinDirection>
	LOCAL_uint8ErrorState=DIO_uint8SetPinValue(Copy_uint8PortId,Copy_uint8PinId,DIO_uint8_HIGH);	
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	6d 2f       	mov	r22, r29
 25e:	8c 2f       	mov	r24, r28
 260:	0e 94 22 02 	call	0x444	; 0x444 <DIO_uint8SetPinValue>
	return LOCAL_uint8ErrorState;
}
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <LEDuint8TurnOff>:

uint8 LEDuint8TurnOff( uint8 Copy_uint8PortId, uint8 Copy_uint8PinId)
{
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	c8 2f       	mov	r28, r24
 270:	d6 2f       	mov	r29, r22
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
	LOCAL_uint8ErrorState=DIO_uint8SetPinDirection(Copy_uint8PortId,Copy_uint8PinId,DIO_uint8_OUTPUT);
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	0e 94 44 01 	call	0x288	; 0x288 <DIO_uint8SetPinDirection>
	LOCAL_uint8ErrorState=DIO_uint8SetPinValue(Copy_uint8PortId,Copy_uint8PinId,DIO_uint8_LOW);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	6d 2f       	mov	r22, r29
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 22 02 	call	0x444	; 0x444 <DIO_uint8SetPinValue>
	return LOCAL_uint8ErrorState;
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <DIO_uint8SetPinDirection>:


uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
		if(Copy_uint8PortId <=DIO_uint8_PORTD && Copy_uint8PinId <= DIO_uint8_PIN7 )
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	08 f0       	brcs	.+2      	; 0x28e <DIO_uint8SetPinDirection+0x6>
 28c:	cd c0       	rjmp	.+410    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 28e:	68 30       	cpi	r22, 0x08	; 8
 290:	08 f0       	brcs	.+2      	; 0x294 <DIO_uint8SetPinDirection+0xc>
 292:	cc c0       	rjmp	.+408    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			switch(Copy_uint8PortId)
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	c1 f1       	breq	.+112    	; 0x308 <DIO_uint8SetPinDirection+0x80>
 298:	38 f0       	brcs	.+14     	; 0x2a8 <DIO_uint8SetPinDirection+0x20>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_uint8SetPinDirection+0x18>
 29e:	64 c0       	rjmp	.+200    	; 0x368 <DIO_uint8SetPinDirection+0xe0>
 2a0:	83 30       	cpi	r24, 0x03	; 3
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_uint8SetPinDirection+0x1e>
 2a4:	91 c0       	rjmp	.+290    	; 0x3c8 <DIO_uint8SetPinDirection+0x140>
 2a6:	c4 c0       	rjmp	.+392    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
			{
				
				case DIO_uint8_PORTA:
					switch(Copy_uint8Direction)
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	81 f0       	breq	.+32     	; 0x2cc <DIO_uint8SetPinDirection+0x44>
 2ac:	18 f0       	brcs	.+6      	; 0x2b4 <DIO_uint8SetPinDirection+0x2c>
 2ae:	42 30       	cpi	r20, 0x02	; 2
 2b0:	d1 f0       	breq	.+52     	; 0x2e6 <DIO_uint8SetPinDirection+0x5e>
 2b2:	c0 c0       	rjmp	.+384    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
					{
						case DIO_uint8_OUTPUT:
							SET_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
 2b4:	2a b3       	in	r18, 0x1a	; 26
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_uint8SetPinDirection+0x38>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_uint8SetPinDirection+0x34>
 2c4:	82 2b       	or	r24, r18
 2c6:	8a bb       	out	0x1a, r24	; 26



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_PORTA:
					switch(Copy_uint8Direction)
					{
						case DIO_uint8_OUTPUT:
							SET_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
							break;
 2ca:	08 95       	ret
						case DIO_uint8_INPUT_FLOATING:
							CLR_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
 2cc:	2a b3       	in	r18, 0x1a	; 26
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_uint8SetPinDirection+0x50>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_uint8SetPinDirection+0x4c>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	8a bb       	out	0x1a, r24	; 26



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 2e2:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_uint8_OUTPUT:
							SET_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
							break;
						case DIO_uint8_INPUT_FLOATING:
							CLR_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
							break;
 2e4:	08 95       	ret
						
						case DIO_uint8_INPUT_PULL_UP:
							CLR_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
 2e6:	2a b3       	in	r18, 0x1a	; 26
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_uint8SetPinDirection+0x6a>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_uint8SetPinDirection+0x66>
 2f6:	98 2f       	mov	r25, r24
 2f8:	90 95       	com	r25
 2fa:	92 23       	and	r25, r18
 2fc:	9a bb       	out	0x1a, r25	; 26
							SET_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
 2fe:	9b b3       	in	r25, 0x1b	; 27
 300:	89 2b       	or	r24, r25
 302:	8b bb       	out	0x1b, r24	; 27



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 304:	81 e0       	ldi	r24, 0x01	; 1
							break;
						
						case DIO_uint8_INPUT_PULL_UP:
							CLR_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
							SET_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
							break;
 306:	08 95       	ret
							
					}
					break;
				
				case DIO_uint8_PORTB:
					switch(Copy_uint8Direction)
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	81 f0       	breq	.+32     	; 0x32c <DIO_uint8SetPinDirection+0xa4>
 30c:	18 f0       	brcs	.+6      	; 0x314 <DIO_uint8SetPinDirection+0x8c>
 30e:	42 30       	cpi	r20, 0x02	; 2
 310:	d1 f0       	breq	.+52     	; 0x346 <DIO_uint8SetPinDirection+0xbe>
 312:	92 c0       	rjmp	.+292    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					{
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
 314:	27 b3       	in	r18, 0x17	; 23
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_uint8SetPinDirection+0x98>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_uint8SetPinDirection+0x94>
 324:	82 2b       	or	r24, r18
 326:	87 bb       	out	0x17, r24	; 23



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 328:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_PORTB:
					switch(Copy_uint8Direction)
					{
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
						break;
 32a:	08 95       	ret
						case DIO_uint8_INPUT_FLOATING:
						CLR_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
 32c:	27 b3       	in	r18, 0x17	; 23
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_uint8SetPinDirection+0xb0>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_uint8SetPinDirection+0xac>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	87 bb       	out	0x17, r24	; 23



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 342:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
						break;
						case DIO_uint8_INPUT_FLOATING:
						CLR_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
						break;
 344:	08 95       	ret
					
						case DIO_uint8_INPUT_PULL_UP:
						CLR_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
 346:	27 b3       	in	r18, 0x17	; 23
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_uint8SetPinDirection+0xca>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_uint8SetPinDirection+0xc6>
 356:	98 2f       	mov	r25, r24
 358:	90 95       	com	r25
 35a:	92 23       	and	r25, r18
 35c:	97 bb       	out	0x17, r25	; 23
						SET_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
 35e:	98 b3       	in	r25, 0x18	; 24
 360:	89 2b       	or	r24, r25
 362:	88 bb       	out	0x18, r24	; 24



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 364:	81 e0       	ldi	r24, 0x01	; 1
						break;
					
						case DIO_uint8_INPUT_PULL_UP:
						CLR_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
						SET_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
						break;
 366:	08 95       	ret
					
					}
					break;				
				
				case DIO_uint8_PORTC:
					switch(Copy_uint8Direction)
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	81 f0       	breq	.+32     	; 0x38c <DIO_uint8SetPinDirection+0x104>
 36c:	18 f0       	brcs	.+6      	; 0x374 <DIO_uint8SetPinDirection+0xec>
 36e:	42 30       	cpi	r20, 0x02	; 2
 370:	d1 f0       	breq	.+52     	; 0x3a6 <DIO_uint8SetPinDirection+0x11e>
 372:	64 c0       	rjmp	.+200    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
					{
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
 374:	24 b3       	in	r18, 0x14	; 20
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_uint8SetPinDirection+0xf8>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_uint8SetPinDirection+0xf4>
 384:	82 2b       	or	r24, r18
 386:	84 bb       	out	0x14, r24	; 20



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 388:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_PORTC:
					switch(Copy_uint8Direction)
					{
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
						break;
 38a:	08 95       	ret
						case DIO_uint8_INPUT_FLOATING:
						CLR_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
 38c:	24 b3       	in	r18, 0x14	; 20
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_uint8SetPinDirection+0x110>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_uint8SetPinDirection+0x10c>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	84 bb       	out	0x14, r24	; 20



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
						break;
						case DIO_uint8_INPUT_FLOATING:
						CLR_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
						break;
 3a4:	08 95       	ret
					
						case DIO_uint8_INPUT_PULL_UP:
						CLR_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
 3a6:	24 b3       	in	r18, 0x14	; 20
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_uint8SetPinDirection+0x12a>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_uint8SetPinDirection+0x126>
 3b6:	98 2f       	mov	r25, r24
 3b8:	90 95       	com	r25
 3ba:	92 23       	and	r25, r18
 3bc:	94 bb       	out	0x14, r25	; 20
						SET_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
 3be:	95 b3       	in	r25, 0x15	; 21
 3c0:	89 2b       	or	r24, r25
 3c2:	85 bb       	out	0x15, r24	; 21



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
						break;
					
						case DIO_uint8_INPUT_PULL_UP:
						CLR_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
						SET_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
						break;
 3c6:	08 95       	ret
					
					}
					break;
				
				case DIO_uint8_PORTD:
					switch(Copy_uint8Direction)
 3c8:	41 30       	cpi	r20, 0x01	; 1
 3ca:	81 f0       	breq	.+32     	; 0x3ec <DIO_uint8SetPinDirection+0x164>
 3cc:	18 f0       	brcs	.+6      	; 0x3d4 <DIO_uint8SetPinDirection+0x14c>
 3ce:	42 30       	cpi	r20, 0x02	; 2
 3d0:	d1 f0       	breq	.+52     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d2:	36 c0       	rjmp	.+108    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
					{
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
 3d4:	21 b3       	in	r18, 0x11	; 17
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_uint8SetPinDirection+0x158>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_uint8SetPinDirection+0x154>
 3e4:	82 2b       	or	r24, r18
 3e6:	81 bb       	out	0x11, r24	; 17



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_PORTD:
					switch(Copy_uint8Direction)
					{
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
						break;
 3ea:	08 95       	ret
						case DIO_uint8_INPUT_FLOATING:
						CLR_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
 3ec:	21 b3       	in	r18, 0x11	; 17
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_uint8SetPinDirection+0x170>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_uint8SetPinDirection+0x16c>
 3fc:	80 95       	com	r24
 3fe:	82 23       	and	r24, r18
 400:	81 bb       	out	0x11, r24	; 17



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 402:	81 e0       	ldi	r24, 0x01	; 1
						case DIO_uint8_OUTPUT:
						SET_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
						break;
						case DIO_uint8_INPUT_FLOATING:
						CLR_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
						break;
 404:	08 95       	ret
					
						case DIO_uint8_INPUT_PULL_UP:
						CLR_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
 406:	21 b3       	in	r18, 0x11	; 17
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	98 2f       	mov	r25, r24
 418:	90 95       	com	r25
 41a:	92 23       	and	r25, r18
 41c:	91 bb       	out	0x11, r25	; 17
						SET_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
 41e:	92 b3       	in	r25, 0x12	; 18
 420:	89 2b       	or	r24, r25
 422:	82 bb       	out	0x12, r24	; 18



uint8 DIO_uint8SetPinDirection(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8Direction)
{
		uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 424:	81 e0       	ldi	r24, 0x01	; 1
						break;
					
						case DIO_uint8_INPUT_PULL_UP:
						CLR_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
						SET_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
						break;
 426:	08 95       	ret
			

		}
		else
		{
			LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
					
					}
					break;
					
				default:
					LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	08 95       	ret
							CLR_BIT(DIO_uint8_DDRA_REG,Copy_uint8PinId);
							SET_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
							break;
						
						default:
							LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	08 95       	ret
						CLR_BIT(DIO_uint8_DDRB_REG,Copy_uint8PinId);
						SET_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
						break;
					
						default:
						LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret
						CLR_BIT(DIO_uint8_DDRC_REG,Copy_uint8PinId);
						SET_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
						break;
					
						default:
						LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
						CLR_BIT(DIO_uint8_DDRD_REG,Copy_uint8PinId);
						SET_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
						break;
					
						default:
						LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 440:	80 e0       	ldi	r24, 0x00	; 0
		}	
		
		
	return LOCAL_uint8ErrorState;
	
}
 442:	08 95       	ret

00000444 <DIO_uint8SetPinValue>:

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
	if(Copy_uint8PortId <=DIO_uint8_PORTD && Copy_uint8PinId <= DIO_uint8_PIN7 )
 444:	84 30       	cpi	r24, 0x04	; 4
 446:	08 f0       	brcs	.+2      	; 0x44a <DIO_uint8SetPinValue+0x6>
 448:	84 c0       	rjmp	.+264    	; 0x552 <DIO_uint8SetPinValue+0x10e>
 44a:	68 30       	cpi	r22, 0x08	; 8
 44c:	08 f0       	brcs	.+2      	; 0x450 <DIO_uint8SetPinValue+0xc>
 44e:	83 c0       	rjmp	.+262    	; 0x556 <DIO_uint8SetPinValue+0x112>
	{
		switch(Copy_uint8PortId)
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	31 f1       	breq	.+76     	; 0x4a0 <DIO_uint8SetPinValue+0x5c>
 454:	38 f0       	brcs	.+14     	; 0x464 <DIO_uint8SetPinValue+0x20>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	09 f4       	brne	.+2      	; 0x45c <DIO_uint8SetPinValue+0x18>
 45a:	40 c0       	rjmp	.+128    	; 0x4dc <DIO_uint8SetPinValue+0x98>
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	09 f4       	brne	.+2      	; 0x462 <DIO_uint8SetPinValue+0x1e>
 460:	5b c0       	rjmp	.+182    	; 0x518 <DIO_uint8SetPinValue+0xd4>
 462:	7b c0       	rjmp	.+246    	; 0x55a <DIO_uint8SetPinValue+0x116>
		{
			
			case DIO_uint8_PORTA:
			switch(Copy_uint8PinValue)
 464:	44 23       	and	r20, r20
 466:	79 f0       	breq	.+30     	; 0x486 <DIO_uint8SetPinValue+0x42>
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	09 f0       	breq	.+2      	; 0x46e <DIO_uint8SetPinValue+0x2a>
 46c:	78 c0       	rjmp	.+240    	; 0x55e <DIO_uint8SetPinValue+0x11a>
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
 46e:	2b b3       	in	r18, 0x1b	; 27
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_uint8SetPinValue+0x36>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_uint8SetPinValue+0x32>
 47e:	82 2b       	or	r24, r18
 480:	8b bb       	out	0x1b, r24	; 27
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 482:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_uint8_PORTA:
			switch(Copy_uint8PinValue)
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
				break;
 484:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_uint8SetPinValue+0x4e>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_uint8SetPinValue+0x4a>
 496:	80 95       	com	r24
 498:	82 23       	and	r24, r18
 49a:	8b bb       	out	0x1b, r24	; 27
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 49c:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
				break;
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
				break;
 49e:	08 95       	ret
				
			}
			break;
			
			case DIO_uint8_PORTB:
			switch(Copy_uint8PinValue)
 4a0:	44 23       	and	r20, r20
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <DIO_uint8SetPinValue+0x7e>
 4a4:	41 30       	cpi	r20, 0x01	; 1
 4a6:	09 f0       	breq	.+2      	; 0x4aa <DIO_uint8SetPinValue+0x66>
 4a8:	5c c0       	rjmp	.+184    	; 0x562 <DIO_uint8SetPinValue+0x11e>
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
 4aa:	28 b3       	in	r18, 0x18	; 24
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_uint8SetPinValue+0x72>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	6a 95       	dec	r22
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_uint8SetPinValue+0x6e>
 4ba:	82 2b       	or	r24, r18
 4bc:	88 bb       	out	0x18, r24	; 24
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 4be:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_uint8_PORTB:
			switch(Copy_uint8PinValue)
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
				break;
 4c0:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
 4c2:	28 b3       	in	r18, 0x18	; 24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_uint8SetPinValue+0x8a>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_uint8SetPinValue+0x86>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	88 bb       	out	0x18, r24	; 24
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
				break;
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
				break;
 4da:	08 95       	ret
			break;
			
			
			
			case DIO_uint8_PORTC:
			switch(Copy_uint8PinValue)
 4dc:	44 23       	and	r20, r20
 4de:	79 f0       	breq	.+30     	; 0x4fe <DIO_uint8SetPinValue+0xba>
 4e0:	41 30       	cpi	r20, 0x01	; 1
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <DIO_uint8SetPinValue+0xa2>
 4e4:	40 c0       	rjmp	.+128    	; 0x566 <DIO_uint8SetPinValue+0x122>
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
 4e6:	25 b3       	in	r18, 0x15	; 21
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_uint8SetPinValue+0xae>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_uint8SetPinValue+0xaa>
 4f6:	82 2b       	or	r24, r18
 4f8:	85 bb       	out	0x15, r24	; 21
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_uint8_PORTC:
			switch(Copy_uint8PinValue)
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
				break;
 4fc:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
 4fe:	25 b3       	in	r18, 0x15	; 21
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_uint8SetPinValue+0xc6>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_uint8SetPinValue+0xc2>
 50e:	80 95       	com	r24
 510:	82 23       	and	r24, r18
 512:	85 bb       	out	0x15, r24	; 21
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 514:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
				break;
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
				break;
 516:	08 95       	ret
			}
			break;
			
			
			case DIO_uint8_PORTD:
			switch(Copy_uint8PinValue)
 518:	44 23       	and	r20, r20
 51a:	71 f0       	breq	.+28     	; 0x538 <DIO_uint8SetPinValue+0xf4>
 51c:	41 30       	cpi	r20, 0x01	; 1
 51e:	29 f5       	brne	.+74     	; 0x56a <DIO_uint8SetPinValue+0x126>
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
 520:	22 b3       	in	r18, 0x12	; 18
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_uint8SetPinValue+0xe8>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_uint8SetPinValue+0xe4>
 530:	82 2b       	or	r24, r18
 532:	82 bb       	out	0x12, r24	; 18
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 534:	81 e0       	ldi	r24, 0x01	; 1
			case DIO_uint8_PORTD:
			switch(Copy_uint8PinValue)
			{
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
				break;
 536:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
 538:	22 b3       	in	r18, 0x12	; 18
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_uint8SetPinValue+0x100>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_uint8SetPinValue+0xfc>
 548:	80 95       	com	r24
 54a:	82 23       	and	r24, r18
 54c:	82 bb       	out	0x12, r24	; 18
}

uint8 DIO_uint8SetPinValue(uint8 Copy_uint8PortId,uint8 Copy_uint8PinId,uint8 Copy_uint8PinValue)
{
	
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 54e:	81 e0       	ldi	r24, 0x01	; 1
				case DIO_uint8_HIGH:
				SET_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
				break;
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
				break;
 550:	08 95       	ret
		

	}
	else
	{
		LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	08 95       	ret
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	08 95       	ret
			}
			break;
			
			
			default:
			LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTA_REG,Copy_uint8PinId);
				break;
				
				default:
				LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTB_REG,Copy_uint8PinId);
				break;
				
				default:
				LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTC_REG,Copy_uint8PinId);
				break;
				
				default:
				LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	08 95       	ret
				case DIO_uint8_LOW:
				CLR_BIT(DIO_uint8_PORTD_REG,Copy_uint8PinId);
				break;
				
				default:
				LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 56a:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	
	return LOCAL_uint8ErrorState;
	
}
 56c:	08 95       	ret

0000056e <Ex0Intuint8Init>:

uint8 Ex0Intuint8Init( uint8 Copy_uint8ExNum , uint8 Copy_uint8ExIntEnable, uint8 Copy_uint8ExIntMode )
{
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;

	switch (Copy_uint8ExNum)
 56e:	81 11       	cpse	r24, r1
 570:	25 c0       	rjmp	.+74     	; 0x5bc <Ex0Intuint8Init+0x4e>
	{
	
		case EXinterrupt_uint8_Ex0 :
		switch(Copy_uint8ExIntMode)
 572:	44 23       	and	r20, r20
 574:	19 f0       	breq	.+6      	; 0x57c <Ex0Intuint8Init+0xe>
 576:	41 30       	cpi	r20, 0x01	; 1
 578:	49 f0       	breq	.+18     	; 0x58c <Ex0Intuint8Init+0x1e>
 57a:	10 c0       	rjmp	.+32     	; 0x59c <Ex0Intuint8Init+0x2e>
		{
			/* choose raising edge or falling edge mode */
			case ExInterrupt_uint8_RaisingEdge:
			SET_BIT(EXInterrupt_MCUCR_uint8_REG,0);
 57c:	85 b7       	in	r24, 0x35	; 53
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	85 bf       	out	0x35, r24	; 53
			SET_BIT(EXInterrupt_MCUCR_uint8_REG,1);
 582:	85 b7       	in	r24, 0x35	; 53
 584:	82 60       	ori	r24, 0x02	; 2
 586:	85 bf       	out	0x35, r24	; 53
static void (*PF_ExInterrupt0) (void) = NULL;


uint8 Ex0Intuint8Init( uint8 Copy_uint8ExNum , uint8 Copy_uint8ExIntEnable, uint8 Copy_uint8ExIntMode )
{
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 588:	81 e0       	ldi	r24, 0x01	; 1
			/* choose raising edge or falling edge mode */
			case ExInterrupt_uint8_RaisingEdge:
			SET_BIT(EXInterrupt_MCUCR_uint8_REG,0);
			SET_BIT(EXInterrupt_MCUCR_uint8_REG,1);
			
			break;
 58a:	09 c0       	rjmp	.+18     	; 0x59e <Ex0Intuint8Init+0x30>
			case ExInterrupt_uint8_fallingEdge:
			CLR_BIT(EXInterrupt_MCUCR_uint8_REG,0);
 58c:	85 b7       	in	r24, 0x35	; 53
 58e:	8e 7f       	andi	r24, 0xFE	; 254
 590:	85 bf       	out	0x35, r24	; 53
			SET_BIT(EXInterrupt_MCUCR_uint8_REG,1);
 592:	85 b7       	in	r24, 0x35	; 53
 594:	82 60       	ori	r24, 0x02	; 2
 596:	85 bf       	out	0x35, r24	; 53
static void (*PF_ExInterrupt0) (void) = NULL;


uint8 Ex0Intuint8Init( uint8 Copy_uint8ExNum , uint8 Copy_uint8ExIntEnable, uint8 Copy_uint8ExIntMode )
{
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 598:	81 e0       	ldi	r24, 0x01	; 1
			break;
			case ExInterrupt_uint8_fallingEdge:
			CLR_BIT(EXInterrupt_MCUCR_uint8_REG,0);
			SET_BIT(EXInterrupt_MCUCR_uint8_REG,1);
			
			break;
 59a:	01 c0       	rjmp	.+2      	; 0x59e <Ex0Intuint8Init+0x30>
			default:
					LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 59c:	80 e0       	ldi	r24, 0x00	; 0

			break;	
		}
		/* enable or disable the External Interrupt zero */
		if(Copy_uint8ExIntEnable==ExInterrupt_uint8_Enable)
 59e:	61 11       	cpse	r22, r1
 5a0:	07 c0       	rjmp	.+14     	; 0x5b0 <Ex0Intuint8Init+0x42>
		{
		SET_BIT(ExInterrupt_uint8_SREG_REG,7);
 5a2:	9f b7       	in	r25, 0x3f	; 63
 5a4:	90 68       	ori	r25, 0x80	; 128
 5a6:	9f bf       	out	0x3f, r25	; 63
		SET_BIT(EXInterrupt_GICR_uint8_REG,6);
 5a8:	9b b7       	in	r25, 0x3b	; 59
 5aa:	90 64       	ori	r25, 0x40	; 64
 5ac:	9b bf       	out	0x3b, r25	; 59
 5ae:	08 95       	ret
		}
		else if(Copy_uint8ExIntEnable==ExInterrupt_uint8_Disable)
 5b0:	61 30       	cpi	r22, 0x01	; 1
 5b2:	29 f4       	brne	.+10     	; 0x5be <Ex0Intuint8Init+0x50>
		{
			CLR_BIT(EXInterrupt_GICR_uint8_REG,6);
 5b4:	9b b7       	in	r25, 0x3b	; 59
 5b6:	9f 7b       	andi	r25, 0xBF	; 191
 5b8:	9b bf       	out	0x3b, r25	; 59
 5ba:	08 95       	ret
		}
		
		break;
		/*we can implement more cases for EX1 and EX2 but now i only need EX0*/
		default:
				LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 5bc:	80 e0       	ldi	r24, 0x00	; 0

		break;
	}
	return LOCAL_uint8ErrorState;
}
 5be:	08 95       	ret

000005c0 <Ex0IntVoidDisable>:


void Ex0IntVoidDisable ()
{
	CLR_BIT(EXInterrupt_GICR_uint8_REG,6);
 5c0:	8b b7       	in	r24, 0x3b	; 59
 5c2:	8f 7b       	andi	r24, 0xBF	; 191
 5c4:	8b bf       	out	0x3b, r24	; 59
 5c6:	08 95       	ret

000005c8 <Ex0IntVoidEnable>:
	
}

void Ex0IntVoidEnable ()
{
	SET_BIT(EXInterrupt_GICR_uint8_REG,6);
 5c8:	8b b7       	in	r24, 0x3b	; 59
 5ca:	80 64       	ori	r24, 0x40	; 64
 5cc:	8b bf       	out	0x3b, r24	; 59
 5ce:	08 95       	ret

000005d0 <EXinterruptVoidCallBack>:
}


void EXinterruptVoidCallBack( void (*Copy_PFVoidCallBack) (void) )
{
	PF_ExInterrupt0=Copy_PFVoidCallBack;
 5d0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <PF_ExInterrupt0+0x1>
 5d4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <PF_ExInterrupt0>
 5d8:	08 95       	ret

000005da <__vector_1>:
}


ISR(INT0_vect)
{
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
	PF_ExInterrupt0();
 5fc:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <PF_ExInterrupt0>
 600:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <PF_ExInterrupt0+0x1>
 604:	09 95       	icall
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <Timer0uint8Init>:

uint8 Timer0uint8Init(uint8 Copy_uint8Mode , uint8 Copy_uint8EnInterrupt,uint8 Copy_uint8PreLoad)
{
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;

	if (Copy_uint8Mode == Timer_uint8NormalMode)
 628:	81 11       	cpse	r24, r1
 62a:	08 c0       	rjmp	.+16     	; 0x63c <Timer0uint8Init+0x14>
	{
		//Normal Mode
		CLR_BIT(TIMER_uint8_TCCR0_REG,3);
 62c:	83 b7       	in	r24, 0x33	; 51
 62e:	87 7f       	andi	r24, 0xF7	; 247
 630:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TIMER_uint8_TCCR0_REG,6);
 632:	83 b7       	in	r24, 0x33	; 51
 634:	8f 7b       	andi	r24, 0xBF	; 191
 636:	83 bf       	out	0x33, r24	; 51
static void (*PF_TimerOverFlowInterrupt) (void) = NULL;


uint8 Timer0uint8Init(uint8 Copy_uint8Mode , uint8 Copy_uint8EnInterrupt,uint8 Copy_uint8PreLoad)
{
	uint8 LOCAL_uint8ErrorState=STD_TYPES_OK;
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	01 c0       	rjmp	.+2      	; 0x63e <Timer0uint8Init+0x16>
		CLR_BIT(TIMER_uint8_TCCR0_REG,6);
	}
	else
	{
		//user enter another mode or invalid number not from my macros
		LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0

	}
	if (Copy_uint8EnInterrupt == Timer_uint8Enable)
 63e:	61 30       	cpi	r22, 0x01	; 1
 640:	39 f4       	brne	.+14     	; 0x650 <Timer0uint8Init+0x28>
	{
		/* turn on global inturrept and timer maskable interrupt flag */
		SET_BIT(TIMER_uint8_SREG_REG,7);
 642:	9f b7       	in	r25, 0x3f	; 63
 644:	90 68       	ori	r25, 0x80	; 128
 646:	9f bf       	out	0x3f, r25	; 63
		SET_BIT(TIMER_uint8_TIMSK_REG,0);	
 648:	99 b7       	in	r25, 0x39	; 57
 64a:	91 60       	ori	r25, 0x01	; 1
 64c:	99 bf       	out	0x39, r25	; 57
 64e:	01 c0       	rjmp	.+2      	; 0x652 <Timer0uint8Init+0x2a>
	}
	else
	{
		/* user enter invalid number not from the macros */
		LOCAL_uint8ErrorState=STD_TYPES_NOT_OK;
 650:	80 e0       	ldi	r24, 0x00	; 0

	}
	/* if we want to count from a aspecific number */
	TIMER_uint8_TCNT0_REG=Copy_uint8PreLoad;
 652:	42 bf       	out	0x32, r20	; 50
	
	//start timer by set prescaler
	SET_BIT(TIMER_uint8_TCCR0_REG,0);
 654:	93 b7       	in	r25, 0x33	; 51
 656:	91 60       	ori	r25, 0x01	; 1
 658:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TIMER_uint8_TCCR0_REG,1);
 65a:	93 b7       	in	r25, 0x33	; 51
 65c:	9d 7f       	andi	r25, 0xFD	; 253
 65e:	93 bf       	out	0x33, r25	; 51
	CLR_BIT(TIMER_uint8_TCCR0_REG,2);
 660:	93 b7       	in	r25, 0x33	; 51
 662:	9b 7f       	andi	r25, 0xFB	; 251
 664:	93 bf       	out	0x33, r25	; 51
	
	return LOCAL_uint8ErrorState;
}
 666:	08 95       	ret

00000668 <TimerVoidSetCallBack>:

void TimerVoidSetCallBack (void (*PF_TMRCallBack) (void))
{
	/* put the address from the user into my pointer to function */
	PF_TimerOverFlowInterrupt=PF_TMRCallBack;
 668:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <PF_TimerOverFlowInterrupt+0x1>
 66c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <PF_TimerOverFlowInterrupt>
 670:	08 95       	ret

00000672 <__vector_11>:
}


/* interrupt service routine which call a function in upper layers using call back concept */
ISR(TIMER0_OVF_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	3f 93       	push	r19
 680:	4f 93       	push	r20
 682:	5f 93       	push	r21
 684:	6f 93       	push	r22
 686:	7f 93       	push	r23
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	af 93       	push	r26
 68e:	bf 93       	push	r27
 690:	ef 93       	push	r30
 692:	ff 93       	push	r31
	
	
	PF_TimerOverFlowInterrupt();
 694:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <PF_TimerOverFlowInterrupt>
 698:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <PF_TimerOverFlowInterrupt+0x1>
 69c:	09 95       	icall
	
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <_exit>:
 6c0:	f8 94       	cli

000006c2 <__stop_program>:
 6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__stop_program>
